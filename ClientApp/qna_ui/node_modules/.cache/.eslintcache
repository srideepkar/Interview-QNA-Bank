[{"D:\\Education\\VS Studio Projects\\WebAPI\\InterviewFAQ\\ClientApp\\qna_ui\\src\\index.js":"1","D:\\Education\\VS Studio Projects\\WebAPI\\InterviewFAQ\\ClientApp\\qna_ui\\src\\App.js":"2","D:\\Education\\VS Studio Projects\\WebAPI\\InterviewFAQ\\ClientApp\\qna_ui\\src\\QuesBank.jsx":"3","D:\\Education\\VS Studio Projects\\WebAPI\\InterviewFAQ\\ClientApp\\qna_ui\\src\\AddQues.jsx":"4","D:\\Projects\\FAQ Interview\\Interview-QNA-Bank\\ClientApp\\qna_ui\\src\\index.js":"5","D:\\Projects\\FAQ Interview\\Interview-QNA-Bank\\ClientApp\\qna_ui\\src\\App.js":"6","D:\\Projects\\FAQ Interview\\Interview-QNA-Bank\\ClientApp\\qna_ui\\src\\QuesBank.jsx":"7","D:\\Projects\\FAQ Interview\\Interview-QNA-Bank\\ClientApp\\qna_ui\\src\\AddQues.jsx":"8"},{"size":300,"mtime":1697738849054,"results":"9","hashOfConfig":"10"},{"size":2153,"mtime":1697744375481,"results":"11","hashOfConfig":"10"},{"size":982,"mtime":1697744361600,"results":"12","hashOfConfig":"10"},{"size":2081,"mtime":1697745551261,"results":"13","hashOfConfig":"10"},{"size":300,"mtime":1697738849054,"results":"14","hashOfConfig":"15"},{"size":2153,"mtime":1697744375481,"results":"16","hashOfConfig":"15"},{"size":982,"mtime":1697744361600,"results":"17","hashOfConfig":"15"},{"size":2081,"mtime":1697745551261,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1elsaga",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d0mp4p",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Education\\VS Studio Projects\\WebAPI\\InterviewFAQ\\ClientApp\\qna_ui\\src\\index.js",[],[],"D:\\Education\\VS Studio Projects\\WebAPI\\InterviewFAQ\\ClientApp\\qna_ui\\src\\App.js",["45"],[],"\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport QuesBank from \"./QuesBank\";\nimport { useState, useEffect } from 'react';\nimport AddQues from './AddQues';\n\nfunction App() {\n  const [isExpanded, setExpanded] = useState(false);\n  const handleExpandClick = () => {\n      setExpanded(!isExpanded);\n  };\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n      fetch('https://localhost:7145/api/QNAs', {\n        method: 'GET',\n      })\n        .then((response) => response.json())\n        .then((responseData) => {\n          setData(responseData)\n        })\n        .catch( (error) => {\n          console.error(\"Unable to get the data from backend. Because, \", error);\n        }          \n        )\n    }, []\n  );\n\n  return (\n    <>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"#\">Interview Question-Answer Bank</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <button className=\"nav-link\" href=\"#\">Dashboard</button>\n            </li>\n            <li className=\"nav-item\">\n              <button className=\"nav-link\" onClick={handleExpandClick}>Add Questions</button>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <div className='addQues'>\n        {isExpanded && (\n          <AddQues/>\n        )}\n      </div>\n\n      {console.log(data)}\n      <div className='QuesCard'>\n        {\n          data.map((items) =>(\n            <>\n              <div className = \"SingleCard\">\n                <QuesBank key={items.id} id={items.id} ques={items.question} ans={items.answer} comp={items.company} />\n              </div>\n            </>\n          ))\n        }        \n      </div>\n    </>\n  );\n}\n\nexport default App;\n","D:\\Education\\VS Studio Projects\\WebAPI\\InterviewFAQ\\ClientApp\\qna_ui\\src\\QuesBank.jsx",["46"],[],"import React from \"react\";\r\nimport \"./QuestionBank.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst QuesBank = (props) => {\r\n    const [isExpanded, setExpanded] = useState(false);\r\n\r\n    const [buttonName, setButtonname] = useState(\"Expand\")\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!isExpanded); \r\n        if (buttonName == \"Expand\"){\r\n            setButtonname(\"Collapse\");\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n        <div className=\"card\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Question {props.id}</h5>\r\n                <p className=\"card-text\">{props.ques}</p>\r\n                {isExpanded && (\r\n                    <div>\r\n                    <p>{props.ans}</p>\r\n                    </div>\r\n                )}\r\n                <button className=\"btn btn-primary\" onClick={handleExpandClick}>{buttonName}</button>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default QuesBank;","D:\\Education\\VS Studio Projects\\WebAPI\\InterviewFAQ\\ClientApp\\qna_ui\\src\\AddQues.jsx",[],[],"D:\\Projects\\FAQ Interview\\Interview-QNA-Bank\\ClientApp\\qna_ui\\src\\index.js",[],[],"D:\\Projects\\FAQ Interview\\Interview-QNA-Bank\\ClientApp\\qna_ui\\src\\App.js",["47"],[],"D:\\Projects\\FAQ Interview\\Interview-QNA-Bank\\ClientApp\\qna_ui\\src\\QuesBank.jsx",["48"],[],"D:\\Projects\\FAQ Interview\\Interview-QNA-Bank\\ClientApp\\qna_ui\\src\\AddQues.jsx",[],[],{"ruleId":"49","severity":1,"message":"50","line":33,"column":9,"nodeType":"51","endLine":33,"endColumn":46},{"ruleId":"52","severity":1,"message":"53","line":12,"column":24,"nodeType":"54","messageId":"55","endLine":12,"endColumn":26},{"ruleId":"49","severity":1,"message":"50","line":33,"column":9,"nodeType":"51","endLine":33,"endColumn":46},{"ruleId":"52","severity":1,"message":"53","line":12,"column":24,"nodeType":"54","messageId":"55","endLine":12,"endColumn":26},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]